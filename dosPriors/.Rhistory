pvals <- seq(0.01, 0.99, length = 1000)
manipulate(
plot(pvals, dbeta(pvals, alpha, beta), type = "l", lwd = 3, frame = FALSE),
alpha = slider(0.01, 10, initial = 1, step = .5),
beta = slider(0.01, 10, initial = 1, step = .5)
)
pvals <- seq(0.01, 0.99, length = 1000)
x <- 13; n <- 20
myPlot <- function(alpha, beta){
plot(0 : 1, 0 : 1, type = "n", xlab = "p", ylab = "", frame = FALSE)
lines(pvals, dbeta(pvals, alpha, beta) / max(dbeta(pvals, alpha, beta)),
lwd = 3, col = "darkred")
lines(pvals, dbinom(x,n,pvals) / dbinom(x,n,x/n), lwd = 3, col = "darkblue")
lines(pvals, dbeta(pvals, alpha+x, beta+(n-x)) / max(dbeta(pvals, alpha+x, beta+(n-x))),
lwd = 3, col = "darkgreen")
title("red=prior,green=posterior,blue=likelihood")
}
manipulate(
myPlot(alpha, beta),
alpha = slider(0.01, 100, initial = 1, step = .5),
beta = slider(0.01, 100, initial = 1, step = .5)
)
pvals <- seq(0.01, 0.99, length = 1000)
x <- 13; n <- 20
myPlot <- function(alpha, beta, x, n){
plot(0 : 1, 0 : 1, type = "n", xlab = "p", ylab = "", frame = FALSE)
lines(pvals, dbeta(pvals, alpha, beta) / max(dbeta(pvals, alpha, beta)),
lwd = 3, col = "darkred")
lines(pvals, dbinom(x,n,pvals) / dbinom(x,n,x/n), lwd = 3, col = "darkblue")
lines(pvals, dbeta(pvals, alpha+x, beta+(n-x)) / max(dbeta(pvals, alpha+x, beta+(n-x))),
lwd = 3, col = "darkgreen")
title("red=prior,green=posterior,blue=likelihood")
}
manipulate(
myPlot(alpha, beta, x, n),
alpha = slider(0.01, 100, initial = 1, step = .5),
beta = slider(0.01, 100, initial = 1, step = .5)
x = slider(1, 100, initial = 1, step = 5),
n = slider(1, 100, initial = 1, step = 5)
)
pvals <- seq(0.01, 0.99, length = 1000)
x <- 13; n <- 20
myPlot <- function(alpha, beta, x, n){
plot(0 : 1, 0 : 1, type = "n", xlab = "p", ylab = "", frame = FALSE)
lines(pvals, dbeta(pvals, alpha, beta) / max(dbeta(pvals, alpha, beta)),
lwd = 3, col = "darkred")
lines(pvals, dbinom(x,n,pvals) / dbinom(x,n,x/n), lwd = 3, col = "darkblue")
lines(pvals, dbeta(pvals, alpha+x, beta+(n-x)) / max(dbeta(pvals, alpha+x, beta+(n-x))),
lwd = 3, col = "darkgreen")
title("red=prior,green=posterior,blue=likelihood")
}
manipulate(
myPlot(alpha, beta, x, n),
alpha = slider(0.01, 100, initial = 1, step = .5),
beta = slider(0.01, 100, initial = 1, step = .5),
x = slider(1, 100, initial = 1, step = 5),
n = slider(1, 100, initial = 1, step = 5)
)
## ICPSR Summer Program 2013
## Required libraries
library(foreign)
library(R2jags)
## calls:
# library(coda)
# li
install.packages("R2jags")
install.packages("rjags")
install.packages("R2OpenBUGS")
install.packages("R2jags")
install.packages("R2jags")
## Required libraries
library(foreign)
library(R2jags)
## calls:
#
?jags
library(car)
data(Angell)
angell.1 <- Angell[, -4] ## take off the fourth column (remember, the order is (row, column))
## What do the data look like?
head(angell.1)
?Angell
angell.model.jags <- function()  {
for(i in 1:N){
moral[i]~dnorm(mu[i], tau)
mu[i]<-alpha + beta1*hetero[i] + beta2*mobility[i]
}
alpha~dnorm(0, .01)
beta1~dunif(-100,100)
beta2~dunif(-100,100)
tau~dgamma(.01,.01)
}
moral <- angell.1$moral
hetero <- angell.1$hetero
mobility <- angell.1$mobility
N <- length(angell.1$moral)
angell.data  <- list("moral", "hetero", "mobility", "N")
angell.params <- c("alpha", "beta1", "beta2")
angell.inits <- function(){
list("alpha"=c(20), "beta1"=c(-0.1), "beta2" =c(-.02))
}
angellfit <- jags(data=angell.data, inits=angell.inits, angell.params, n.chains=2, n.iter=9000, n.burnin=1000, model.file=angell.model.jags)
print(angellfit)
plot(angellfit)
traceplot(angellfit)
angellfit.mcmc <- as.mcmc(angellfit)
summary(angellfit.mcmc)
xyplot(angellfit.mcmc)
xyplot(angellfit.mcmc, layout=c(2,2), aspect="fill")
densityplot(angellfit.mcmc)
densityplot(angellfit.mcmc, layout=c(2,2), aspect="fill")
plot(angellfit.mcmc)
autocorr.plot(angellfit.mcmc)
geweke.diag(angellfit.mcmc)
ggmcmc(angellfit.mcmc)
angellfit.gg <- ggs(angellfit.mcmc)
ggmcmc(angellfit.gg)
install.packages("ggmcmc")
# Another option for diagnostics and results: the ggmcmc package
library(ggmcmc)
# All plots into one PDF file in your working directory (!):
ggmcmc(angellfit.mcmc)
angellfit.gg <- ggs(angellfit.mcmc)
ggmcmc(angellfit.gg)
ggs_histogram(angellfit.gg)
ggs_density(angellfit.gg)
ggs_traceplot(angellfit.gg)
ggs_running(angellfit.gg)
install.packages("mcmcplots")
library(mcmcplots)
denplot(angellfit.mcmc, parms = c("alpha", "beta1", "beta2"))
traplot(angellfit.mcmc, parms = c("alpha", "beta1", "beta2"))
caterplot(angellfit.mcmc)
caterplot(angellfit.mcmc, parms = c("alpha", "beta1", "beta2"), labels = c("Intercept", "Heterogeneity", "Mobility"))
mcmcplot(angellfit.mcmc)
install.packages("superdiag")
library(superdiag)
superdiag(angellfit.mcmc, burnin = 100)
angell.params <- c("alpha", "beta1", "beta2")
angellfit <- jags2(data=angell.data, inits=angell.inits, angell.params, n.chains=2, n.iter=5000, model.file=angell.model.jags, clearWD = FALSE)
print(angellfit)
plot(angellfit)
library(boa)
boa.menu()
## ICPSR Summer Program 2013
## Required libraries
library(R2jags)
## Model
rats.model <- function()  {
for( i in 1 : N ) {
for( j in 1 : T ) {
Y[i , j] ~ dnorm(mu[i , j],tau.c)
mu[i , j] <- alpha[i] + beta[i] * (x[j] - xbar)
}
alpha[i] ~ dnorm(alpha.c,tau.alpha)
beta[i] ~ dnorm(beta.c,tau.beta)
}
tau.c ~ dgamma(0.001,0.001)
sigma <- 1 / sqrt(tau.c)
alpha.c ~ dnorm(0.0,1.0E-6)
sigma.alpha~ dunif(0,100)
sigma.beta~ dunif(0,100)
tau.alpha<-1/(sigma.alpha*sigma.alpha)
tau.beta<-1/(sigma.beta*sigma.beta)
beta.c ~ dnorm(0.0,1.0E-6)
alpha0 <- alpha.c - xbar * beta.c
}
rats.data  <- list(x = c(8.0, 15.0, 22.0, 29.0, 36.0), xbar = 22, N = 30, T = 5,
Y = structure(
.Data =   c(151, 199, 246, 283, 320,
145, 199, 249, 293, 354,
147, 214, 263, 312, 328,
155, 200, 237, 272, 297,
135, 188, 230, 280, 323,
159, 210, 252, 298, 331,
141, 189, 231, 275, 305,
159, 201, 248, 297, 338,
177, 236, 285, 350, 376,
134, 182, 220, 260, 296,
160, 208, 261, 313, 352,
143, 188, 220, 273, 314,
154, 200, 244, 289, 325,
171, 221, 270, 326, 358,
163, 216, 242, 281, 312,
160, 207, 248, 288, 324,
142, 187, 234, 280, 316,
156, 203, 243, 283, 317,
157, 212, 259, 307, 336,
152, 203, 246, 286, 321,
154, 205, 253, 298, 334,
139, 190, 225, 267, 302,
146, 191, 229, 272, 302,
157, 211, 250, 285, 323,
132, 185, 237, 286, 331,
160, 207, 257, 303, 345,
169, 216, 261, 295, 333,
157, 205, 248, 289, 316,
137, 180, 219, 258, 291,
153, 200, 244, 286, 324),
.Dim = c(30,5)))
Y <- rats.data$Y
T <- rats.data$T
x <-  rats.data$x
xbar <- rats.data$xbar
N <- rats.data$N
## Read in the rats data for JAGS
rats.data  <- list("Y", "x", "T", "N", "xbar")
## Name the JAGS parameters
rats.params <- c("tau.c", "sigma", "alpha.c", "sigma.alpha", "sigma.beta", "tau.alpha", "tau.beta", "beta.c", "alpha0")
## Define the starting values for JAGS
rats.inits <- function(){
list("alpha"=c(250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250),
"beta"=c(6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6),
"alpha.c"=c(150), "beta.c"=c(10), "tau.c"=c(1), "sigma.alpha"=c(1), "sigma.beta"=c(1))
}
ratsfit <- jags(data=rats.data, inits=rats.inits, rats.params, n.chains=2, n.iter=2000, n.burnin=1000, model.file=rats.model)
plot(ratsfit)
traceplot(ratsfit)
ratsfit.mcmc <- as.mcmc(ratsfit)
summary(ratsfit.mcmc)
xyplot(ratsfit.mcmc)
gelman.plot(ratsfit.mcmc)
geweke.diag(ratsfit.mcmc)
raftery.diag(ratsfit.mcmc)
heidel.diag(ratsfit.mcmc)
library(mcmcplots)
caterplot(angellfit.mcmc, parms = c("beta1", "beta2"), labels = c("Diversity", "Mobility"), val.lim = c(-0.27, 0.05))
abline(v = 0)
coef.vect <- angellfit$BUGSoutput$summary[2:3, 1]
sd.vect <- angellfit$BUGSoutput$summary[2:3, 2]
short.names <- rownames(angellfit$BUGSoutput$summary[2:3,])
long.names <- c("Diversity", "Mobility")
library(arm)
coefplot(coef.vect, sd.vect, varnames=long.names, main="", xlim = c(-0.3, 0.05))
coefplot(coef.vect, sd.vect, varnames=long.names, main="", xlim = c(-0.3, 0.05))
coef.vect <- angellfit$BUGSoutput$summary[2:3, 1]
sd.vect <- angellfit$BUGSoutput$summary[2:3, 2]
short.names <- rownames(angellfit$BUGSoutput$summary[2:3,])
long.names <- c("Diversity", "Mobility")
coefplot(coef.vect, sd.vect, varnames=long.names, main="", xlim = c(-0.3, 0.05))
library(ggplot2)
angellfit.mat <- as.matrix(angellfit.mcmc)
angellfit.dat <- as.data.frame(angellfit.mat)
coef.vect <- apply(angellfit.dat, 2, mean)
lower.vect <- apply(angellfit.dat, 2, function(x) quantile(x, probs = c(0.025)))
upper.vect <- apply(angellfit.dat, 2, function(x) quantile(x, probs = c(0.975)))
long.names <- c("Intercept", "Diversity", "Mobility", "Deviance")
plot.dat <- data.frame(coef.vect, lower.vect, upper.vect, long.names)[c(2,3), ]
p <- ggplot(data = plot.dat, aes(x = coef.vect, y = long.names)) + geom_point() + geom_segment(aes(x = lower.vect, xend = upper.vect, y = long.names, yend = long.names))
p <- p + geom_vline(xintercept = 0, colour = "blue", linetype = 2) + xlab("Posterior estimates") + ylab("")
p
pumps.data <- list(t = c(94.3, 15.7, 62.9, 126, 5.24, 31.4, 1.05, 1.05, 2.1, 10.5),
x = c(5, 1, 5, 14, 3, 19, 1, 1, 4, 22), N = 10)
t <- pumps.data$t
x <- pumps.data$x
N <- pumps.data$N
pumps.data <- list("t", "x", "N")
## Model
## Save the following model separately in "pumps.model.jags" in your WD. Don't type it into R.
pumps.mod <- function()  {
for (i in 1:N) {
theta[i] ~ dgamma(alpha, beta)
lambda[i] <- theta[i] * t[i]	## t is an independent variable
x[i] ~ dpois(lambda[i])			## x is a stochastic node, lambda is a deterministic node.
}
alpha ~ dexp(1)						## alpha and beta are the hyperpriors (and parental nodes)
beta ~ dgamma(0.1, 1.0)
}
pumps.params <- c("theta")
pumpsfit <- jags(data=pumps.data, inits=NULL, pumps.params, n.chains=2, n.iter=5000, n.burnin=1000, model.file=pumps.mod)
plot(pumpsfit)
theta <- seq(0.01, 0.99, by = 0.01)
df <- data.frame()
for (n in c(10, 100, 1000))
{
l <- dbinom(0.9 * n, n, theta)
df <- rbind(df, data.frame(theta = theta, L = l, N = n))
}
ggplot(df, aes(x = theta, y = log(L))) +
geom_line() +
facet_grid(. ~ N) +
ylab('Log Likelihood') +
opts(title = 'Log Likelihood Function as N Increases')
theta <- seq(0.01, 0.99, by = 0.01)
df <- data.frame()
for (n in c(10, 100, 1000))
{
l <- dbinom(0.9 * n, n, theta)
df <- rbind(df, data.frame(theta = theta, L = l, N = n))
}
ggplot(df, aes(x = theta, y = log(L))) +
geom_line() +
facet_grid(. ~ N) +
ylab('Log Likelihood') +
theme(title = 'Log Likelihood Function as N Increases')
d <- c(0, 1, 1, 1, 1, 1, 1, 1, 1, 1)
likelihood <- function(d, theta)
{
dbinom(sum(d), length(d), prob = theta)
}
df <- data.frame(theta = seq(0, 1, by = 0.01))
df <- transform(df, likelihood = likelihood(d, theta))
ggplot(df, aes(x = theta, y = likelihood)) +
geom_line()
with(df[1:100, ], sum(likelihood) * 0.01)
# beta(2, 3) prior
df <- transform(df, prior = dbeta(theta, 2, 3))
ggplot(df, aes(x = theta, y = prior)) +
geom_line()
?jags
## Required libraries
library(R2jags)
?jags
source('~/.active-rstudio-document', echo=TRUE)
?dbeta
curve(dbeta(1,1,1))
x <- seq(0, 1, length = 21)
dbeta(x, 1, 1)
pbeta(x, 1, 1)
curve(dbeta(,1,1))
x
curve(dbeta(x,1,1))
curve(dbeta(x,10,10))
setwd("/home/manel/tuto-bayes/tabsets")
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
outcomes
outcomes<-sample(1:0,N,prob=c(p,1-p),replace=TRUE)
N=input$n
p=0.5
y_lim=20
a_a=2
a_b=10
b_a=8
b_b=3
x <- seq(0, 1, length = 101)
outcomes<-sample(1:0,N,prob=c(p,1-p),replace=TRUE)
success<-cumsum(outcomes)
outcomes
success
success
runApp()
runApp()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp()
runApp()
?curve
?col
?color
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
system('mencoder mf://plots/*.png -mf fps=15:type=png -ovc copy -oac copy -o plots/output.avi')
runApp()
setwd("/home/manel/tuto-bayes/tabsets")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?for
?for
?for
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/tuto-bayes/curvas.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
system('mencoder mf://plots/*.png -mf fps=15:type=png -ovc copy -oac copy -o plots/output.avi')
source('~/tuto-bayes/curvas.R', echo=TRUE)
source('~/tuto-bayes/curvas.R', echo=TRUE)
source('~/tuto-bayes/curvas.R', echo=TRUE)
source('~/proyectos/rproyectos/tuto/tuto-bayes/regresion_JAGS.R', echo=TRUE)
library('rjags')
source('~/proyectos/rproyectos/tuto/tuto-bayes/regresion_JAGS.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd("/home/manel/tuto-bayes/posterior")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("/home/manel/tuto-bayes/dosPriors")
runApp()
runApp()
modelo.jags1.samples
head(modelo.jags1.samples)
modelo.jags1.samples[[1]]
head(modelo.jags1.samples[[1]])
head(modelo.jags1.samples[[1]][1,])
head(modelo.jags1.samples[[1]][7,])
head(modelo.jags1.samples[[1]][7,1])
modelo.jags1.samples[[1]][7,1]
plot(modelo.jags1.samples[[1]][,1],modelo.jags1.samples[[1]][,2])
plot(modelo.jags1.samples[[1]][,1])
plot(modelo.jags1.samples[[1]])
plot(modelo.jags1.samples[[1]][,1])
plot(modelo.jags1.samples[[1]][,1]~modelo.jags1.samples[[1]][,2])
dev.off()
plot(modelo.jags1.samples[[1]][,1]~modelo.jags1.samples[[1]][,2])
dev.off()
plot(modelo.jags1.samples[[1]][,1]~modelo.jags1.samples[[1]][,2])
plot(modelo.jags1.samples[[1]][,1])
plot(modelo.jags1.samples[[1]][,1]~modelo.jags1.samples[[1]][,2])
modelo.jags1.samples[[1],1]
modelo.jags1.samples[1]
modelo.jags1.samples[1,1]
plot(modelo.jags1.samples[1,]~modelo.jags1.samples[2,])
plot(modelo.jags1.samples[1,])
modelo.jags1.samples[1,]
modelo.jags1.samples[1,1]
modelo.jags1.samples[1,1][1]
modelo.jags1.samples[1,][1]
modelo.jags1.samples[11][1]
modelo.jags1.samples[11][]
modelo.jags1.samples[1,1][]
modelo.jags2.mcmc
head(modelo.jags2.mcmc)
modelo.jags2.mcmc[[1]][1,1]
modelo.jags2.mcmc[[1]][1,2]
plot(modelo.jags2.mcmc[[1]][1,])
plot(modelo.jags2.mcmc[[1]][,2]~modelo.jags2.mcmc[[1]][,3])
g <- modelo.jags1.samples[[1]][,2]
g
head(g)
g[1]
p <- modelo.jags1.samples[[1]][,3]
x <- seq(0,100,1)
x <- seq(0,length(p),1)
y <- x*p+g
y <- x*p[1]+g[1]
plot(y~x)
plotxy(y~x)
plot(y~x,lty=1)
plot(y~x,lty=2)
lines(y~x)
curve(y~x)
y
x
curve(y[1:length(x)]~x)
plot(y~x,type='l')
oror.real <- 10
pendiente.real <- 3
sigma <- 5
x <- seq(0, 10, by = 0.1)
y <- pendiente.real * x + oror.real
y <- y + rnorm(length(y), 0, sigma)
N <- length(x)
fich.datos.regresion <- file.path(dir.Principal,'datos', 'regresion', 'regresion.csv')
write.csv(data.frame(X = x, Y = y),
file = fich.datos.regresion ,
row.names = FALSE)
png(file.path(dir.Principal, 'graficas', 'regresion', 'datos.png'))
plot(y~x, main ="DATOS GENERADOS SINTÉTICAMENTE PARA REGRESIÓN LINEAL")
dev.off()
plot(y~x)
plot(lm(y~x))
plot(lm(y~x))
lm(y~x)
